<?php


namespace DDDGen\Tests;


use DDDGen\Generator;
use DDDGen\VO\FQCN;
use DDDGen\VO\Layer;
use DDDGen\VO\Primitive;
use PHPUnit\Framework\TestCase;

class GeneratorTest extends TestCase
{
    protected function setUp()
    {
        // remove all tmp folders
        passthru("rm -rf " . __DIR__ . "/resources/tmp");
        
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    
    
    protected function tearDown()
    {
        // remove all tmp folders
        passthru("rm -rf " . __DIR__ . "/resources/tmp");
        
        parent::tearDown(); // TODO: Change the autogenerated stub
    
    }
    
    
    function test_it_accepts_config()
    {
        [$config, $primitives, $generator] = $this->seed_config();
        
        
        // Make API call
        $layer          = "app";
        $primitive_name = "command";
        $name           = "Some/Command/ClassName";
        
        $output = $generator->generate($layer, $primitive_name, FQCN::fromString($name));
        
        
        $this->assertEquals([
            $config['layers'][$layer]['src']['dir'] . "/Some/Command/ClassName/ClassNameCommand.php"
            => __DIR__ . "/resources/stubs/SimpleStub.stub.php",
            
            $config['layers'][$layer]['src']['dir'] . "/Some/Command/ClassName/ClassNameHandler.php"
            => __DIR__ . "/resources/stubs/SimpleStub.stub.php",
            
            $config['layers'][$layer]['tests']['dir'] . "/Some/Command/ClassName/ClassNameCommandTest.php"
            => __DIR__ . "/resources/stubs/SimpleTestStub.stub.php",
        ], $output);
        
        foreach ($output as $file => $stub) {
            $this->assertFileExists($file);
        }
        
        
    }
    
    private function seed_config()
    {
        $config = [
            "layers" => [
                "app" => [
                    "src" => [
                        "qcn" => "\\DDDGenApp",
                        "dir" => __DIR__ . "/resources/tmp/src/app",
                    ],
                    "tests" => [
                        "qcn" => "\\Tests",
                        "dir" => __DIR__ . "/resources/tmp/tests",
                    ],
                ],
                "domain" => [
                    "src" => [
                        "qcn" => "\\DDDGen",
                        "dir" => __DIR__ . "/resources/tmp/src/domain",
                    ],
                    "tests" => [
                        "qcn" => "\\Tests",
                        "dir" => __DIR__ . "/resources/tmp/tests",
                    ],
                ],
                "infrastructure" => [
                    "src" => [
                        "qcn" => "\\DDDGenInfrastructure",
                        "dir" => __DIR__ . "/resources/tmp/src/infrastructure",
                    ],
                    "tests" => [
                        "qcn" => "\\Tests",
                        "dir" => __DIR__ . "/resources/tmp/tests",
                    ],
                ],
            ],
            "primitives" => [
                "command" => [
                    "src" => [
                        "stubs" => [
                            "/*<PSR4_NAMESPACE_LAST>*/Command" => __DIR__ . "/resources/stubs/SimpleStub.stub.php",
                            "/*<PSR4_NAMESPACE_LAST>*/Handler.php" => __DIR__ . "/resources/stubs/SimpleStub.stub.php",
                        ],
                    ],
                    "test" => [
                        "stubs" => [
                            "/*<PSR4_NAMESPACE_LAST>*/CommandTest" => __DIR__ . "/resources/stubs/SimpleTestStub.stub.php",
                        ],
                    ],
                
                ],
            ],
        
        ];
        
        // make folders
        @mkdir($config['test_dir'], 0777, true);
        foreach ($config['layers'] as $layer) {
            @mkdir($layer['src']['dir'], 0777, true);
        }
        
        // instantiate objects
        
        $primitives = $this->makePrimitives($config['primitives']);
        $layers     = $this->makeLayers($config['layers']);
        
        $generator = new Generator(
            $layers,
            $primitives
        );
        
        return [$config, $primitives, $generator];
    }
    
    private function makeLayers(array $config): array
    {
        $layers = [];
        foreach ($config as $layer_name => $layer_config) {
            $layers[] = new Layer(
                $layer_name,
                new FQCN($layer_config['src']['qcn']),
                $layer_config['src']['dir'],
                new FQCN($layer_config['tests']['qcn']),
                $layer_config['tests']['dir']
            );
        }
        
        return $layers;
    }
    
    private function makePrimitives(array $config): array
    {
        $primitives = [];
        foreach ($config as $name => $primitive_config) {
            $primitives[] = new Primitive(
                $name,
                $primitive_config['src']['stubs'],
                $primitive_config['test']['stubs']
            );
        }
        
        return $primitives;
    }
    
}
